import type { JSONSchema4 } from "json-schema";
import type { Region } from "../region.js";
import { GenericMessage, type TaskMessageData } from "./task.js";
import { Tool } from "../tool.js";
type ToolState = "cancelled" | "error" | "finished" | "pending" | "running";
export type ToolStatus = "cancelled" | "error" | "completed" | "pending" | "running";
export interface ToolMessageContent {
    type: "tool-run";
    tool_run_state: ToolState;
    output: Record<string, unknown> & {
        _agent_conversation_details?: {
            agent_id: string;
            conversation_id: string;
        };
    };
    params: {
        resolved?: Record<string, unknown>;
        valid: boolean;
    };
    errors: {
        body: string;
        raw: string;
        step_name: string;
    }[];
    tool_config: {
        type: "agent" | "tool";
        title: string;
        description: string;
        region: Region;
        project: string;
        id: string;
        emoji?: string;
        params_schema: JSONSchema4;
    };
}
export declare class ToolMessage extends GenericMessage<ToolMessageContent> {
    readonly tool?: Tool;
    constructor(message: TaskMessageData<ToolMessageContent>);
    /**
     * The tool status for _this_ message.
     *
     * @property {ToolStatus}
     */
    get status(): ToolStatus;
    /**
     * Parameters used to call the tool.
     *
     * @property {object}
     */
    get params(): Record<string, unknown> | null;
    /**
     * The tool's output. Will be `null` if the status is **not** "finished".
     *
     * @property {object|null}
     */
    get output(): Record<string, unknown> | null;
    /**
     * Tool errors.
     *
     * @property {array}
     * @see {@link ToolMessage#hasErrors}
     */
    get errors(): {
        stepName: string;
        message: string;
    }[];
    /**
     * The tool or agent ID.
     *
     * @property {string}
     */
    get toolOrAgentId(): string;
    /**
     * The agent's ID, if a sub-agent.
     *
     * @property {string}
     * @see {@link ToolMessage#isSubAgent}
     */
    get agentId(): string | null;
    /**
     * The tool/agent's corresponding project.
     *
     * @property {string}
     */
    get project(): string;
    /**
     * The tool/agent's corresponding region.
     *
     * @property {Region}
     */
    get region(): Region;
    /**
     * The task ID the subagent ran. Will be `null` if the tool message is not
     * a subagent.
     *
     * @property {string}
     * @see {@link ToolMessage.isSubAgent}
     */
    get subAgentTaskId(): string | null;
    /**
     * Checks if the tool message came from a sub-agent.
     *
     * @returns {boolean}
     */
    isSubAgent(): boolean;
    /**
     * Checks if the tool call parameters where valid.
     *
     * @returns {boolean}
     */
    areParamsValid(): boolean;
    /**
     * Returns if the tool message has any errors.
     *
     * @returns {boolean}
     */
    hasErrors(): boolean;
    /**
     * Checks if the tool message is currently running. Note that pending tools
     * are also classified as running as they are just scheduled for running.
     *
     * @returns {boolean}
     */
    isRunning(): boolean;
}
export {};
