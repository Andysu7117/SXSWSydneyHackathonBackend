export type EventMap = Record<string, unknown>;
/**
 * Emitter
 *
 * Abstraction for type-assisting event targets.
 *
 * @internal
 */
export declare abstract class Emitter<M extends EventMap = Record<string, never>> extends EventTarget {
    addEventListener<K extends keyof M>(type: Extract<K, string>, listener: ((event: CustomEvent<M[K]>) => void) | {
        handleEvent: (event: CustomEvent<M[K]>) => void;
    } | null, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof M>(type: Extract<K, string>, listener: ((event: CustomEvent<M[K]>) => void) | {
        handleEvent: (event: CustomEvent<M[K]>) => void;
    } | null, options?: boolean | AddEventListenerOptions): void;
}
