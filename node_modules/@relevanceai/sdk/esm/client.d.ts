import { type Region } from "./region.js";
import { Key } from "./key.js";
type CreateClientOptions = {
    apiKey: string;
    region: Region;
    project: string;
};
export type Attachment = {
    fileName: string;
    fileUrl: string;
};
/**
 * Creates and returns the _default_ client instance.
 *
 * @throws {Error} if a default client already exists.
 * @see {@link Client.default}
 */
export declare function createClient(keyOrOptions: Key | CreateClientOptions): Client;
export declare class Client {
    /**
     * Returns the _default_ client instance.
     *
     * @throws {Error} if there is no default client.
     * @see {@link createClient}
     */
    static default(): Client;
    readonly key: Key;
    private readonly baseURL;
    constructor(key: Key);
    get region(): Region;
    get project(): string;
    isEmbedKey(): boolean;
    fetch<T>(input: "/agents/trigger" | `/agents/${string}/get` | `/agents/${string}/tasks/${string}/metadata` | `/agents/${string}/tasks/${string}/view` | "/agents/conversations/list" | "/services/get_temporary_file_upload_url" | `/workforce/items/${string}` | `/workforce/tasks/${string}/metadata` | `/workforce/items/${string}/tasks/${string}/messages` | "/workforce/trigger" | "/agents/list", init?: RequestInit): Promise<T>;
    url(path: string): URL;
    uploadTempFile(file: File): Promise<Attachment>;
}
export {};
