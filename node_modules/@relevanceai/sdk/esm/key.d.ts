import type { Region } from "./region.js";
type CreateKeyOptions = {
    key: string;
    region: Region;
    project: string;
    agentId?: string;
    taskPrefix?: string;
};
type GenerateEmbedKeyOptions = Omit<CreateKeyOptions, "key" | "taskPrefix">;
/**
 * Key is used to authenticate requests for the {@link Client}. A Key can be
 * either a _full_ key or an _embed_ key.
 *
 * A full key has access to SDK features. An embed key is scoped to a specific
 * agent and is only used to create and interact with tasks for that agent.
 *
 * @see {@link Key.generateEmbedKey} to generate an embed key for a specific agent.
 *
 * @class Key
 */
export declare class Key {
    #private;
    /**
     * Generates an embed key for the specified agent. The embed key can then be
     * used to create a {@link Client} instance that can create and interact with
     * tasks for that agent.
     *
     * @throws {Error} if the request to generate an embed key fails.
     *
     * @param {GenerateEmbedKeyOptions} options The generation options.
     *
     * @returns {Promise<Key>}
     */
    static generateEmbedKey({ region, project, agentId, }: GenerateEmbedKeyOptions): Promise<Key>;
    /**
     * The region the key is scoped to.
     *
     * @property {string} region
     */
    readonly region: Region;
    /**
     * The project the key is scoped to.
     *
     * @property {string} project
     */
    readonly project: string;
    /**
     * The agent ID the embed key is scoped to. This is `undefined` for full
     * keys.
     *
     * @property {string | undefined} agentId
     */
    readonly agentId: string | undefined;
    /**
     * The task prefix used to namespace tasks created with the embed key. This
     * is `undefined` for full keys.
     *
     * @property {string | undefined} taskPrefix
     */
    readonly taskPrefix: string | undefined;
    /**
     * Creates a new {@link Key} instance with the provided options.
     *
     * @param {CreateKeyOptions} options
     */
    constructor({ key, region, project, agentId, taskPrefix }: CreateKeyOptions);
    /**
     * Returns whether the key is an embed key.
     *
     * @returns {boolean}
     */
    isEmbed(): boolean;
    /**
     * Returns the headers required for authenticating requests with this key.
     *
     * @returns {HeadersInit}
     */
    fetchHeaders(): HeadersInit;
    /**
     * Returns a JSON representation of the key.
     *
     * @returns {CreateKeyOptions}
     */
    toJSON(): CreateKeyOptions;
}
export {};
