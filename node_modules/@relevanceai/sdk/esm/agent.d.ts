import { type Attachment, Client } from "./client.js";
import type { Region } from "./region.js";
import { Task, type TaskStatus } from "./task/task.js";
export interface AgentConfig {
    agent_id: string;
    public: boolean;
    project: string;
    name?: string;
    description?: string;
    emoji?: string;
    insert_date_: string;
    update_date_: string;
    model: string;
}
export type AgentTaskState = "idle" | "starting-up" | "running" | "pending-approval" | "waiting-for-capacity" | "cancelled" | "timed-out" | "escalated" | "unrecoverable" | "paused" | "completed" | "errored-pending-approval" | "queued-for-approval" | "queued-for-rerun";
/**
 * Converts an AgentTaskState to a simplified TaskStatus.
 *
 * @dev
 *   We want to simplify because our states are simplified in the UI and also
 *   some states have combined reasoning that the consumer does not need to care
 *   about. i.e. "queued-for-approval" "queued-for-rerun" should just be "queued".
 *
 * @param {AgentTaskState} state The agent task state to convert.
 * @returns {TaskStatus} The simplified task status.
 */
export declare function stateToStatus(state: AgentTaskState): TaskStatus;
type SortDirection = "asc" | "desc";
type GetTaskOptionSort = {
    createdAt: SortDirection;
} | {
    updatedAt: SortDirection;
};
type GetTaskOptions = {
    pageSize?: number;
    page?: number;
    sort?: GetTaskOptionSort;
    search?: string;
    filter?: {
        status?: TaskStatus[];
    };
};
type GetAllOptions = {
    pageSize?: number;
    page?: number;
};
export declare class Agent {
    #private;
    static get(id: string, client?: Client): Promise<Agent>;
    static getAll({ page, pageSize, }?: GetAllOptions, client?: Client): Promise<Agent[]>;
    private readonly client;
    constructor(config: AgentConfig, client: Client);
    get id(): string;
    get region(): Region;
    get project(): string;
    get name(): string | undefined;
    get description(): string | undefined;
    get avatar(): string | undefined;
    get createdAt(): Date;
    get updatedAt(): Date;
    getTask(taskId: string): Promise<Task<Agent>>;
    getTasks({ sort, pageSize, page, search, filter, }?: GetTaskOptions): Promise<Task<Agent>[]>;
    sendMessage(message: string): Promise<Task<Agent>>;
    sendMessage(message: string, task: Task<Agent>): Promise<Task<Agent>>;
    sendMessage(message: string, attachments: (Attachment | File)[]): Promise<Task<Agent>>;
    sendMessage(message: string, attachments: (Attachment | File)[], task: Task<Agent>): Promise<Task<Agent>>;
}
export {};
