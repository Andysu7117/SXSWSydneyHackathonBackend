"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
exports.createClient = createClient;
const region_js_1 = require("./region.js");
const utils_js_1 = require("./utils.js");
const key_js_1 = require("./key.js");
let defaultClient;
/**
 * Creates and returns the _default_ client instance.
 *
 * @throws {Error} if a default client already exists.
 * @see {@link Client.default}
 */
function createClient(keyOrOptions) {
    if (defaultClient) {
        throw new Error("default client already exists");
    }
    const key = keyOrOptions instanceof key_js_1.Key ? keyOrOptions : new key_js_1.Key({
        key: keyOrOptions.apiKey,
        region: keyOrOptions.region,
        project: keyOrOptions.project,
    });
    defaultClient = new Client(key);
    return defaultClient;
}
class Client {
    /**
     * Returns the _default_ client instance.
     *
     * @throws {Error} if there is no default client.
     * @see {@link createClient}
     */
    static default() {
        if (!defaultClient) {
            throw new Error("no default client");
        }
        return defaultClient;
    }
    key;
    baseURL;
    constructor(key) {
        this.key = key;
        this.baseURL = (0, region_js_1.regionBaseURL)(this.key.region);
    }
    get region() {
        return this.key.region;
    }
    get project() {
        return this.key.project;
    }
    isEmbedKey() {
        return this.key.isEmbed();
    }
    async fetch(input, init) {
        const url = this.url(input);
        const reqInit = Object.assign({}, init, {
            headers: {
                ...this.key.fetchHeaders(),
                ...init?.headers,
            },
        });
        const response = await fetch(url, reqInit);
        if (!response.ok) {
            const body = await response.text();
            console.error("client#fetch(): request failed.", url, body, reqInit);
            throw new Error(response.statusText);
        }
        return response.json();
    }
    url(path) {
        if (/^https?:\/\//.test(path)) {
            return new URL(path);
        }
        return new URL((0, utils_js_1.cleanPath)(path), this.baseURL);
    }
    async uploadTempFile(file) {
        const { upload_url: uploadUrl, download_url: downloadUrl } = await this
            .fetch("/services/get_temporary_file_upload_url", {
            method: "POST",
            body: JSON.stringify({
                filename: file.name,
                extension: (0, utils_js_1.getFileExtension)(file.name),
            }),
        });
        let content = file.type;
        if (file.type.startsWith("text/")) {
            content += "; charset=utf-8"; // force utf-8 for text files
        }
        const response = await fetch(uploadUrl, {
            method: "PUT",
            body: file,
            headers: {
                "content-type": content,
                "x-amz-tagging": "Expire=true",
            },
        });
        if (!response.ok) {
            throw new Error(response.statusText);
        }
        return {
            fileName: file.name,
            fileUrl: downloadUrl,
        };
    }
}
exports.Client = Client;
