import type { AgentMessage } from "./agent.js";
import type { AgentErrorMessage } from "./agent-error.js";
import type { ToolMessage } from "./tool.js";
import type { UserMessage } from "./user.js";
import type { WorkforceAgentMessage } from "./workforce-agent.js";
import type { WorkforceAgentHandoverMessage } from "./workforce-agent-handover.js";
export type AnyTaskMessage = AgentMessage | AgentErrorMessage | ToolMessage | UserMessage | WorkforceAgentMessage | WorkforceAgentHandoverMessage;
export type TaskMessageType = AnyTaskMessage["type"];
interface MessageContent {
    type: AnyTaskMessage["type"];
}
export interface TaskMessageData<C extends MessageContent = MessageContent> {
    item_id: string;
    insert_date_: string;
    content: C;
}
export declare abstract class GenericMessage<C extends MessageContent = MessageContent> {
    protected readonly message: TaskMessageData<C>;
    constructor(message: TaskMessageData<C>);
    /**
     * The task's message type.
     *
     * @property {TaskMessageType}
     */
    get type(): C["type"];
    /**
     * The task message ID. Used for referencing the message.
     *
     * @property {string}
     */
    get id(): string;
    /**
     * The time the task was created.
     *
     * @property {Date}
     */
    get createdAt(): Date;
    /**
     * Returns if the message was sent from the agent.
     *
     * @returns {boolean}
     */
    isAgent(): this is AgentMessage;
    /**
     * Returns if the message is from a tool.
     *
     * @returns {boolean}
     */
    isTool(): this is ToolMessage;
    /**
     * Returns if the message was sent from a user.
     *
     * @returns {boolean}
     */
    isUser(): this is UserMessage;
    /**
     * Returns if the message was an error sent by the agent.
     *
     * @returns {boolean}
     */
    isAgentError(): this is AgentErrorMessage;
}
export {};
