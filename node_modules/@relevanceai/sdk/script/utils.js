"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.abortPromise = abortPromise;
exports.delay = delay;
exports.cleanPath = cleanPath;
exports.randomUUID = randomUUID;
exports.getFileExtension = getFileExtension;
function abortPromise(signal, reject) {
    return new Promise((res, rej) => signal.addEventListener("abort", () => reject ? rej() : res()));
}
function delay(timeout) {
    return new Promise((done) => setTimeout(done, typeof timeout === "number" ? timeout : timeout()));
}
function cleanPath(path, version = "latest") {
    return `/${version}/${path.trim().replace(/^\/+/, "")}`;
}
async function randomUUID() {
    if (typeof crypto !== "undefined") {
        return crypto.randomUUID();
    }
    // @ts-ignore allow this import for node builds
    const cryptoModule = await Promise.resolve().then(() => __importStar(require("node:crypto")));
    return cryptoModule.randomUUID();
}
function getFileExtension(filename) {
    const dot = filename.lastIndexOf(".");
    return dot >= 0 ? filename.slice(dot + 1) : "";
}
