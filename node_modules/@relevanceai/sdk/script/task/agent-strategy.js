"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentStrategy = void 0;
const agent_js_1 = require("../agent.js");
const client_js_1 = require("../client.js");
const agent_error_js_1 = require("../message/agent-error.js");
const agent_js_2 = require("../message/agent.js");
const tool_js_1 = require("../message/tool.js");
const user_js_1 = require("../message/user.js");
const task_js_1 = require("./task.js");
class AgentStrategy {
    static async get(id, agent, client = client_js_1.Client.default()) {
        const subject = new this(id, agent, client);
        return new task_js_1.Task(await subject.getMetadata(), subject);
    }
    id;
    agent;
    client;
    constructor(id, agent, client) {
        this.id = id;
        this.agent = agent;
        this.client = client;
    }
    get subject() {
        return this.agent;
    }
    async getMetadata() {
        const { metadata } = await this.client.fetch(`/agents/${this.agent.id}/tasks/${this.id}/metadata`);
        return {
            id: this.id,
            region: this.client.region,
            project: this.client.project,
            name: metadata.conversation.title,
            status: (0, agent_js_1.stateToStatus)(metadata.conversation.state),
            createdAt: new Date(metadata.insert_date),
            updatedAt: new Date(metadata.update_date),
        };
    }
    async getMessages({ after = new Date(0) } = {}) {
        const url = `/agents/${this.agent.id}/tasks/${this.id}/view`;
        const res = await this.client.fetch(url, {
            method: "POST",
            body: JSON.stringify({
                page_size: 1_000, // @todo: pagination
                cursor: {
                    after: after.toISOString(),
                },
            }),
        });
        // message should be in ascending order
        return res.results.reverse().map((data) => {
            switch (data.content.type) {
                case "agent-error":
                    return new agent_error_js_1.AgentErrorMessage(data);
                case "agent-message":
                    return new agent_js_2.AgentMessage(data, this.agent);
                case "tool-run":
                    return new tool_js_1.ToolMessage(data);
                case "user-message":
                    return new user_js_1.UserMessage(data);
                default:
                    throw new Error("unknown message response");
            }
        });
    }
}
exports.AgentStrategy = AgentStrategy;
